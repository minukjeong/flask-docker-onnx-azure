# .github/workflows/main.yml

name: Build and Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: <asia-northeast3>      # Artifact Registry 리전 (예: 서울)
  SERVICE_NAME: <my-flask-app>         # Cloud Run에 배포될 서비스 이름
  REPOSITORY: <my-docker-repo>         # Artifact Registry 저장소 이름

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. GitHub 저장소의 코드를 워크플로우 환경으로 가져옵니다.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. GCP 서비스 계정 키를 사용하여 인증합니다.
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # 3. gcloud CLI를 설정합니다.
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      # 4. Artifact Registry에 Docker 이미지를 푸시할 수 있도록 gcloud로 Docker를 설정합니다.
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # 5. Docker 이미지를 빌드하고 Artifact Registry로 푸시합니다.
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

      # 6. 빌드된 이미지를 Google Cloud Run에 배포합니다.
      - name: Deploy to Cloud Run
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE_NAME }}
          region: <asia-northeast3> # Cloud Run 서비스 리전
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          allow-unauthenticated: true # 외부에서 서비스에 접근할 수 있도록 허용
